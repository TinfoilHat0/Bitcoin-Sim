def plotUtility(filename):
    """
        First line is thresholds: thresholdOfNode1,.., thresholdOfNodeN
        row format: utilityOfNode1, .., utilityofNodeN
    """
    # 1. Extract data
    log = np.loadtxt(filename + "UtilityDataBTC", delimiter=",")
    nNodes = len(log[0])
    colors = ['-r', '-g', '-b']

    utilityValsBTC = [ [] for i in range(nNodes) ]
    thresholdsBTC, expRoundsBTC = log[0], log[1]
    for row in log[2:]:
        for i in range(nNodes):
            utilityValsBTC[i].append(row[i])

    log = np.loadtxt(filename + "UtilityDataFTC", delimiter=",")
    thresholdsFTC, expRoundsFTC = log[0], log[1]
    utilityValsFTC = [ [] for i in range(nNodes) ]
    for row in log[2:]:
        for i in range(nNodes):
            utilityValsFTC[i].append(row[i])

    # 2. Plot data
    plt.figure(figsize=(10,10))
    # -- plotting vertical expected rounds line
    for i in range(len(expRoundsBTC)):
        plt.axvline(x=expRoundsBTC[i], color='k', linestyle='-')
    # -- plotting horizontal threshold line
    for i in range(len(thresholdsBTC)):
        plt.axhline(y=thresholdsBTC[i], color='k', linestyle='-')
    # -- plotting utility value vs. rounds
    for i in range(len(utilityValsBTC)):
        plt.plot(utilityValsBTC[i], colors[i%3], label='Node_' + str(i) )
    # -- legend of plot
    plt.xlabel("Rounds")
    plt.ylabel("Value of utility")
    plt.legend()
    plt.savefig(filename + "BTCUtility.png")
    plt.close()

    plt.figure(figsize=(10,10))
    # -- plotting vertical expected rounds line
    for i in range(len(expRoundsFTC)):
        plt.axvline(x=expRoundsFTC[i], color='k', linestyle='-')
    # -- plotting horizontal threshold line
    for i in range(len(thresholdsFTC)):
        plt.axhline(y=thresholdsFTC[i], color='k', linestyle='-')
    # -- plotting utility value vs. rounds
    for i in range(len(utilityValsFTC)):
        plt.plot(utilityValsFTC[i], colors[i%3], label='Node_' + str(i) )
    # -- legend of plot
    plt.xlabel("Rounds")
    plt.ylabel("Value of utility")
    plt.legend()
    plt.savefig(filename + "FTCUtility.png")
    plt.close()






        def writeUtilityData(self, filename):
            # 1. BTC data
            file = open(filename + "UtilityDataBTC", 'w')
            file.write("#r:" + str(self.r) + " p:" +str(self.p) + " pF:" + str(self.pF) + " k: " + str(self.k) +
            " c1:" + str(self.environment.c1) + " c2:" + str(self.environment.c2) + " c3:" + str(self.environment.c3) + "\n")
            file.write("# Value of utility function(BTC) by round for each node, seperated by commas. First line is thresholds. Second line is expected rounds to pass them." + "\n")

            thresholds, expRounds = [], []
            for node in self.nodes:
                thresholds.append( node.threshold )
                expRounds.append( node.expRoundsToPassThresholdBTC )
            file.write(",".join(map(str, thresholds)) + "\n")
            file.write(",".join(map(str, expRounds)) + "\n")

            for i in range(self.r-1):
                roundLog = []
                for node in self.nodes:
                    roundLog.append( node.utilityLogBTC[i][0] )
                file.write(",".join(map(str, roundLog)) + "\n")
            file.close()

            # 2. FTC data
            file = open(filename + "UtilityDataFTC", 'w')
            file.write("#r:" + str(self.r) + " p:" +str(self.p) + " pF:" + str(self.pF) + " k: " + str(self.k) +
            " c1:" + str(self.environment.c1) + " c2:" + str(self.environment.c2) + " c3:" + str(self.environment.c3) + "\n")
            file.write("# Value of utility function(FTC) by round for each node, seperated by commas. First line is thresholds. Second line is expected rounds to pass them." + "\n")

            thresholds, expRounds = [], []
            for node in self.nodes:
                thresholds.append( node.threshold )
                expRounds.append( node.expRoundsToPassThresholdFTC )
            file.write(",".join(map(str, thresholds)) + "\n")
            file.write(",".join(map(str, expRounds)) + "\n")

            for i in range(self.r-1):
                roundLog = []
                for node in self.nodes:
                    roundLog.append( node.utilityLogFTC[i][0] )
                file.write(",".join(map(str, roundLog)) + "\n")
            file.close()
